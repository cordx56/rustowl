name: Release RustOwl

on:
  push:
    tags:
      - v*

permissions:
  actions: read
  contents: write

jobs:
  build:
    uses: ./.github/workflows/build.yaml

  meta:
    runs-on: ubuntu-latest
    outputs:
      pre_release: ${{ steps.pre-release.outputs.pre_release }}
    steps:
      - name: Check pre-release
        id: pre-release
        run: |
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "pre_release=false" >> $GITHUB_OUTPUT
          else
            echo "pre_release=true" >> $GITHUB_OUTPUT
          fi

  crates-io-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - meta
    steps:
      - uses: actions/checkout@v4
      - name: Release crates.io
        if: needs.meta.outputs.pre_release != 'true'
        run: |
          echo '${{ secrets.CRATES_IO_API_TOKEN }}' | cargo login
          cargo publish

  vscode-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - meta
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Release vsce
        if: needs.meta.outputs.pre_release != 'true'
        run: |
          yarn install --frozen-locked
          yarn vsce publish
        working-directory: ./vscode
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  vscodium-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - meta
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Release ovsx
        if: needs.meta.outputs.pre_release != 'true'
        run: |
          yarn install --frozen-locked
          yarn ovsx publish
        working-directory: ./vscode
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

  winget-release:
    runs-on: windows-latest
    needs:
      - build
      - meta
    steps:
      - uses: vedantmgoyal9/winget-releaser@main
        if: needs.meta.outputs.pre_release != 'true'
        with:
          identifier: Cordx56.Rustowl
          token: ${{ secrets.WINGET_TOKEN }}

  aur-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - meta
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AUR Release
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        if: needs.meta.outputs.pre_release != 'true'
        with:
          pkgname: rustowl-bin
          pkgbuild: ./aur/PKGBUILD
          updpkgsums: true
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519
        env:
          AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
          AUR_EMAIL: ${{ secrets.AUR_EMAIL }}
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

  github-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - meta
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Generate Release Notes
        run: |
          npx changelogithub@latest --contributors --output release.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: rustowl-*
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          draft: true
          body_path: release.md
          prerelease: ${{ needs.meta.outputs.pre_release == 'true' }} 
