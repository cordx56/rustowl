name: Release RustOwl

on:
  push:
    tags:
      - v*

jobs:
  rustowl:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15
          - macos-13
          - windows-2022
          - windows-11-arm

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    env:
      RUSTC_BOOTSTRAP: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set Rust version that RustOwl uses here
      # Using stable build cause failure to link on Windows ARM
      - if: ${{ matrix.os != 'windows-11-arm' }}
        name: Set Rust toolchain
        run: echo "RUSTUP_TOOLCHAIN=1.86.0" >> $GITHUB_ENV

      # We don't have rustup on the Windows 11 Arm64 runner yet, so manually installing it.
      - if: ${{ matrix.os == 'windows-11-arm' }}
        name: Install rustup
        run: |
          URL='https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe'
          HASH="$(curl -sSL "${URL}.sha256")"
          curl -sSL -o ./rustup-init.exe "${URL}"
          if [ "$(sha256sum ./rustup-init.exe | cut -d' ' -f 1)" = "${HASH}" ]; then
            ./rustup-init.exe -y --no-update-default-toolchain
            echo "${USERPROFILE}\.cargo\bin" >> "${GITHUB_PATH}"
          else
            echo "::error::The SHA256 digest does not match."
            exit 1
          fi

      - name: Setup Rust
        run: |
          rustup install --profile minimal
          rustup component add rust-src rustc-dev llvm-tools

      - name: check host tuple
        run: |
          echo "host_tuple=$(rustc --print=host-tuple)" >> $GITHUB_ENV
          ([[ "$(rustc --print=host-tuple)" == *msvc* ]] && echo "exec_ext=.exe" || echo "exec_ext=") >> $GITHUB_ENV
          ([[ "$(rustc --print=host-tuple)" == *windows* ]] && echo "is_windows=true" || echo "is_windows=false") >> $GITHUB_ENV
          ([[ "$(rustc --print=host-tuple)" == *linux* ]] && echo "is_linux=true" || echo "is_linux=false") >> $GITHUB_ENV

      - name: Install zig
        if: env.is_linux == 'true'
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Build
        run: |
          if [[ "${{ env.is_linux }}" == "true" ]]; then
            cargo install --locked cargo-zigbuild
            cargo zigbuild --target ${{ env.host_tuple }}.2.17 --release
          else
            cargo build --release
          fi

      - name: Set archive name
        run: |
          if [[ "${{ env.is_windows }}" == "true" ]]; then
            echo "archive_name=rustowl-${{ env.host_tuple }}.zip" >> $GITHUB_ENV
          else
            echo "archive_name=rustowl-${{ env.host_tuple }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Setup archive artifacts
        run: |
          rm -rf runtime
          cp -r "$(rustc --print=sysroot)" runtime

          if [[ "${{ env.is_linux }}" == "true"  ]]; then
            cp target/${{ env.host_tuple }}/release/rustowl${{ env.exec_ext }} ./runtime
            cp target/${{ env.host_tuple }}/release/rustowlc${{ env.exec_ext }} ./runtime
          else
            cp target/release/rustowl${{ env.exec_ext }} ./runtime
            cp target/release/rustowlc${{ env.exec_ext }} ./runtime
          fi

          cp README.md ./runtime
          cp LICENSE ./runtime

          find target -type d | grep -E 'rustowl-build-time-out$' | xargs -I % cp -r % ./
          cp -r rustowl-build-time-out/completions ./runtime
          cp -r rustowl-build-time-out/man ./runtime

          rm -rf ${{ env.archive_name }}
          cd runtime

          if [[ "${{ env.is_windows }}" == "true" ]]; then
            powershell -c 'tar.exe -a -cf "..\${{ env.archive_name }}" README.md LICENSE "rustowl${{ env.exec_ext }}" "rustowlc${{ env.exec_ext }}" completions man (Get-ChildItem -Recurse -File | Where-Object { $_.Extension -match "\.(rlib|dll)$"  } | Select-Object -ExpandProperty FullName)'
          else
            ls | \
              xargs -I % find % -type f | \
              grep -E '\.(rlib|so|dylib)$' | \
              xargs tar -czvf ../${{ env.archive_name }} README.md LICENSE rustowl${{ env.exec_ext }} rustowlc${{ env.exec_ext }} completions/ man/
          fi

          cp ./rustowl${{ env.exec_ext }} ../rustowl-${{ env.host_tuple }}${{ env.exec_ext }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: rustowl-runtime-${{ env.host_tuple }}
          path: |
            rustowl-${{ env.host_tuple }}${{ env.exec_ext }}
            ${{ env.archive_name }}

  vscode:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: yarn install --frozen-locked
        working-directory: ./vscode
      - name: Create VSIX
        run: yarn build
        working-directory: ./vscode

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: rustowl-vscode
          path: vscode/**/*.vsix


  release:
    runs-on: ubuntu-latest
    needs:
      - rustowl
      - vscode
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: rustowl-*
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          draft: true
          generate_release_notes: true
      - name: AUR Release
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: rustowl-bin
          pkgbuild: ./aur/PKGBUILD
          updpkgsums: true
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519
        env:
          AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
          AUR_EMAIL: ${{ secrets.AUR_EMAIL }}
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
